name: Update database with deleted, modified added files. Update filenames to store IDs for new question files

on:
  push:
    branches:
      - main # Adjust as needed for your workflow

jobs:
  update-ids:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.DEPLOY_KEY }}
          fetch-depth: 0 # Ensure we fetch the full history so we can git diff
          submodules: recursive

      - name: Set up JDK 21
        uses: actions/setup-java@v4.5.0
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Identify Changed Files
        id: changed-files
        run: |
          # Run the script to parse the git diff output
          git_diff_output=$(git diff --name-status HEAD^ HEAD)

          # Initialize empty lists for added, updated, and deleted files
          added_files=()
          updated_files=()
          deleted_files=()
          config_flag=""

          # Process each line of the git diff output
          while IFS=$'\t' read -r status filename; do
            if [[ "$filename" == "config.yaml" ]]; then
              config_flag="--config"
            fi

            # Only process .md files in questions directory and subdirectories
            if [[ "$filename" == questions/**/*.md || "$filename" == questions/*.md ]]; then
              case "$status" in
                A)
                  added_files+=("'$filename'")
                  ;;
                M)
                  updated_files+=("'$filename'")
                  ;;
                D)
                  deleted_files+=("'$filename'")
                  ;;
              esac
            fi
          done <<< "$git_diff_output"

          # Join the arrays into space-separated strings
          added_files=$(IFS=' '; echo "${added_files[*]}")
          updated_files=$(IFS=' '; echo "${updated_files[*]}")
          deleted_files=$(IFS=' '; echo "${deleted_files[*]}")

          # Set the output variables for the GitHub Action
          echo "added_files=$added_files" >> $GITHUB_ENV
          echo "updated_files=$updated_files" >> $GITHUB_ENV
          echo "deleted_files=$deleted_files" >> $GITHUB_ENV
          echo "config_flag=$config_flag" >> $GITHUB_ENV
        shell: bash

      - name: Build and Run Parser
        run: |
          cd uploader

          # Echo the arguments to display them
          echo "Running Gradle with the following arguments:"
          echo "upload ${config_flag} --added ${added_files} --updated ${updated_files} --deleted ${deleted_files}"

          ./gradlew build
          ./gradlew run --args="upload ${config_flag} --added ${added_files} --updated ${updated_files} --deleted ${deleted_files}"
          cd ..
        env:
          JDBC_URL: ${{ secrets.JDBC_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}


      - name: Check for File Changes
        id: check-diff
        run: |
          if git diff --quiet; then
            echo "changed=false" >> $GITHUB_ENV
          else
            echo "changed=true" >> $GITHUB_ENV
          fi

      - name: Commit and Push Changes
        if: env.changed == 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Update IDs of changed/added question files"
          git push

      - name: Get Latest Commit Hash
        id: get-latest-commit-hash
        run: echo "new_hash=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Update assessments with newest hash
        run: |
          cd uploader
          ./gradlew build
          ./gradlew run --args="hash --commit $new_hash"
        env:
          JDBC_URL: ${{ secrets.JDBC_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
